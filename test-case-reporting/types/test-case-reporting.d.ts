/**
 * Copyright 2020 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

declare module 'test-case-reporting' {
  /**
   * CI job types for which test results may be reported.
   */
  export type TestSuiteType = 'unit' | 'integration' | 'e2e';

  export type TestStatus = 'PASS' | 'FAIL' | 'SKIP' | 'ERROR';

  /** A CI build. */
  export interface Build {
    commitSha: string;
    buildId: string;
    url?: string;
    startedAt: Date;
  }

  /** A job within a CI build. */
  export interface Job {
    build: Build;
    jobId: string;
    url?: string;
    testSuiteType: TestSuiteType;
  }

  /** A single kind of test case, one `it` or `test` block. */
  export interface TestCase {
    // MD5 hash of the test case name
    id: string;
    name: string;
    createdAt: Date;
    stats?: TestCaseStats;
  }

  export interface TestCaseStats {
    sampleSize: number;
    pass: number;
    fail: number;
    skip: number;
    error: number;
  }

  /** An instance of a test being run, with results. */
  export interface TestRun {
    job: Job;
    testCase: TestCase;
    status: TestStatus;
    timestamp: Date;
    durationMs: number;
  }

  /** Fields for the size and offset of a database query. Used for pagination. */
  export interface PageInfo {
    limit: number;
    offset: number;
  }

  // Types in the DB namespace interface with the database which
  // uses snake_case instead of camelCase.
  /* eslint-disable camelcase */
  // Nullable fields in this namespace are nullable because they are not set when uploading.
  // They are not nullable columns in the database.
  namespace DB {
    export interface Build {
      id?: number;
      commit_sha: string;
      url?: string;
      build_id: string;
      started_at?: number;
    }

    export interface Job {
      id?: number;
      build_id: number;
      url?: string;
      job_id: string;
      test_suite_type: TestSuiteType;
      started_at?: number;
    }

    export interface TestCase {
      // MD5 hash of the test case name
      id: string;
      name: string;
      // Defaults to now on the database
      created_at?: number;
    }

    export interface TestRun {
      id?: number;
      job_id: number;
      test_case_id: string;
      status: TestStatus;
      timestamp?: number;
      duration_ms: number;
    }

    export interface TestRunWithJobAndBuild
      extends Build,
        Job,
        TestCase,
        TestRun {
      build_started_at: number;
      build_url: string;
      job_url: string;
    }

    export interface TestCaseStats {
      id?: number;
      test_case_id: string;
      sample_size: number;
      pass: number;
      fail: number;
      skip: number;
      error: number;
      dirty?: boolean;
    }
  }
  /* eslint-enable camelcase */

  // Types for the JSON reports generated by Karma
  // Supposed to match the reports exactly; that's why time
  // isn't timeMs, for example.
  namespace KarmaReporter {
    export interface TestResultReport {
      browsers: Array<BrowserResult>;
    }

    export interface BrowserResult {
      results: Array<TestResult>;
    }

    export interface TestResult {
      description: string;
      suite: Array<string>;
      success: boolean;
      skipped: boolean;
      time: number; // in milliseconds
    }
  }

  // Types for the JSON reports POSTed during CI
  // Supposed to match the reports exactly.
  namespace CI {
    export interface Report {
      job: CI.Job;
      build: CI.Build;
      results: KarmaReporter.TestResultReport;
      repository: string;
    }
    export interface Build {
      buildId: string;
      commitSha: string;
      url: string;
    }
    export interface Job {
      jobId: string;
      testSuiteType: TestSuiteType;
      url: string;
    }
  }
}
